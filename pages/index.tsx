/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable react/prop-types */
/* eslint-disable @typescript-eslint/no-unused-vars */
import type { NextPage } from 'next';
import Head from 'next/head';
import React, { useEffect, useState, useRef } from 'react';
import { getSession, useSession, signOut } from 'next-auth/client';
import { Session } from 'next-auth';
import { getUserById } from 'db/user';
import { connectToDB } from 'db/connect';
import firebase from 'db/firebase';
import { useDocument } from 'react-firebase-hooks/firestore';
import { useRouter } from 'next/dist/client/router';

const Home: NextPage = (props: any) => {
    const [workplaces, setWorkplaces] = useState(props.workplaces);
    const [newBody] = useState({ id: 'aslkdjklsjdfklsjdkfjs', name: 'New Store' });
    const [value, loading, error] = useDocument(firebase.firestore().doc('workplaces/61325b3296e4eb481c819011'), {
        snapshotListenOptions: { includeMetadataChanges: true },
    });
    const router = useRouter();
    // eslint-disable-next-line react/prop-types
    const checkRef = useRef(props.firstRender);
    useEffect(() => {
        if (checkRef.current && value) {
            checkRef.current = false;
            return;
        }
        if (checkRef.current) {
            return;
        }
        updateData(`61325b3296e4eb481c819011`);
        // updateData(value?.data().id)
    }, [value]);

    const updateData = async (workplaceId: string) => {
        const res = await fetch(`${process.env.NEXT_PUBLIC_API_HOST}/api/workplaces/${workplaceId}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        });
        const { data } = await res.json();
        const result = JSON.parse(data);

        setWorkplaces(result.workplaces);
    };

    const addWorkplace = async () => {
        await fetch(`${process.env.NEXT_PUBLIC_API_HOST}/api/workplaces`, {
            method: 'POST',
            body: JSON.stringify(newBody),
            headers: {
                'Content-Type': 'application/json',
            },
        });
    };

    return (
        <div className="dark bg-white">
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className="bg-red-100 p-2 dark:bg-gray-900 min-h-screen">
                <button onClick={() => signOut()} className="bg-red-500 p-2 rounded">
                    Sign Out
                </button>
                <button onClick={() => addWorkplace()} className="bg-green-500 p-2 rounded">
                    Add Data
                </button>

                <div className="bg-white flex flex-col gap-3">
                    {workplaces &&
                        workplaces.map(({ id, name }: { id: string; name: string }) => (
                            <button
                                key={id}
                                onClick={() => router.push(`/workplaces/${id}`)}
                                className="bg-blue-500 my-2 p-2 rounded"
                            >
                                {name}
                            </button>
                        ))}
                </div>
            </main>
        </div>
    );
};

export async function getServerSideProps(context) {
    const session: Session = await getSession(context);
    if (!session || !session.user) {
        return {
            redirect: {
                permanent: false,
                destination: '/signin',
            },
        };
    }
    const { db } = await connectToDB();
    const user = JSON.parse(await getUserById(db, session.user.id));
    const workplaces = user.workplaces;
    return {
        props: {
            user: session.user,
            workplaces: workplaces,
            firstRender: true,
        },
    };
}

export default Home;
